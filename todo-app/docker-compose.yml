services:
  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u root -p example --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes: 
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend/mongo_data:/data/db
  redis:
    image: redis:7.0-rc-alpine
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./todo-backend/redis_data:/data
  app:
    image: todo-app-front
    build:
      context: ./todo-frontend # The context will pick this directory as the "build context"
      dockerfile: Dockerfile # This will simply tell which dockerfile to read
      args:
        REACT_APP_BACKEND_URL: http://localhost:8080/api/
    volumes:
      - ./todo-frontend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3000:80
    container_name: todo-app-front
  todo-backend:
    build:
      context: ./todo-backend
      dockerfile: Dockerfile
    environment:
      - MONGO_URL=mongodb://the_username:the_password@mongo/the_database
      - REDIS_URL=redis://redis
      - PORT=3001
    depends_on:
      redis:
        condition: service_healthy
    ports: 
      - 3001:3001
    volumes:
      - ./todo-backend:/usr/src/app
      - ./todo-backend/nodemon.json:/usr/src/app/nodemon.json
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:81
    container_name: reverse-proxy
    depends_on:
      - app # wait for the frontend container to be started
      - todo-backend